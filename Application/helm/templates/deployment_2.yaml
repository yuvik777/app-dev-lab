kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-2
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  replicas: {{ .Values.ReplicaNumber }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/ConfigMap.yaml") . | sha256sum }}
    spec:
      volumes:
        - name: index-html
          configMap:
            name: index.html
            defaultMode: 420
      containers:
          - resources: {}
            volumeMounts:
            - name: index-html
              mountPath: /tmp/html # this will mount the html.index file to it application location
            terminationMessagePath: /dev/termination-log
            name: {{ .Release.Name }}-2
            ports:
              - containerPort: {{ .Values.containers.containerPort }}
                protocol: TCP
            imagePullPolicy: Always
            terminationMessagePolicy: File
            image: {{ .Values.containers.image }}:{{ .Values.containers.tag }}
            env:
              - name: PORT
                value: {{ .Values.containers.containerPort | quote }}
            readinessProbe:
                    httpGet:
                      path: /health/readiness # this check the application url path
                      port: {{ .Values.containers.containerPort  }} # In which port the Application is listening
                      scheme: HTTP
                    initialDelaySeconds: 1 # the time is waiting befor testing the application path
                    timeoutSeconds: 1 # the time for timeout
                    periodSeconds: 10 # the abount of time to wait between checks
                    successThreshold: 1 # count to decalre seccessfull 
                    failureThreshold: 3 # count to decalre failure
            livenessProbe:
                      httpGet:
                        path: /health/liveliness
                        port: {{ .Values.containers.containerPort }}
                        scheme: HTTP
                      initialDelaySeconds: 1
                      timeoutSeconds: 1
                      periodSeconds: 10
                      successThreshold: 1
                      failureThreshold: 3
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10